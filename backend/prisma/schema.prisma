// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clients  Client[]
  projects Project[]
  tickets  Ticket[]

  @@map("users")
}

model Client {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  company   String
  city      String?
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects Project[]

  @@map("clients")
}

model Project {
  id          String        @id @default(cuid())
  title       String
  description String?
  status      ProjectStatus @default(ACTIVE)
  budget      Float?
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  clientId    String
  userId      String

  client  Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tickets Ticket[]

  @@map("projects")
}

model Ticket {
  id          String       @id @default(cuid())
  title       String
  description String?
  status      TicketStatus @default(OPEN)
  priority    Priority     @default(MEDIUM)
  type        TicketType   @default(BUG)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  projectId   String
  userId      String

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tickets")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketType {
  BUG
  FEATURE
  TASK
  SUPPORT
}
